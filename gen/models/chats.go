// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Chat is an object representing the database table.
type Chat struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID1   int       `boil:"user_id_1" json:"user_id_1" toml:"user_id_1" yaml:"user_id_1"`
	UserID2   int       `boil:"user_id_2" json:"user_id_2" toml:"user_id_2" yaml:"user_id_2"`
	Message   string    `boil:"message" json:"message" toml:"message" yaml:"message"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	ChatID    string    `boil:"chat_id" json:"chat_id" toml:"chat_id" yaml:"chat_id"`

	R *chatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChatColumns = struct {
	ID        string
	UserID1   string
	UserID2   string
	Message   string
	CreatedAt string
	ChatID    string
}{
	ID:        "id",
	UserID1:   "user_id_1",
	UserID2:   "user_id_2",
	Message:   "message",
	CreatedAt: "created_at",
	ChatID:    "chat_id",
}

var ChatTableColumns = struct {
	ID        string
	UserID1   string
	UserID2   string
	Message   string
	CreatedAt string
	ChatID    string
}{
	ID:        "chats.id",
	UserID1:   "chats.user_id_1",
	UserID2:   "chats.user_id_2",
	Message:   "chats.message",
	CreatedAt: "chats.created_at",
	ChatID:    "chats.chat_id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ChatWhere = struct {
	ID        whereHelperint
	UserID1   whereHelperint
	UserID2   whereHelperint
	Message   whereHelperstring
	CreatedAt whereHelpernull_Time
	ChatID    whereHelperstring
}{
	ID:        whereHelperint{field: "\"chats\".\"id\""},
	UserID1:   whereHelperint{field: "\"chats\".\"user_id_1\""},
	UserID2:   whereHelperint{field: "\"chats\".\"user_id_2\""},
	Message:   whereHelperstring{field: "\"chats\".\"message\""},
	CreatedAt: whereHelpernull_Time{field: "\"chats\".\"created_at\""},
	ChatID:    whereHelperstring{field: "\"chats\".\"chat_id\""},
}

// ChatRels is where relationship names are stored.
var ChatRels = struct {
	UserID2User string
	UserID1User string
}{
	UserID2User: "UserID2User",
	UserID1User: "UserID1User",
}

// chatR is where relationships are stored.
type chatR struct {
	UserID2User *User `boil:"UserID2User" json:"UserID2User" toml:"UserID2User" yaml:"UserID2User"`
	UserID1User *User `boil:"UserID1User" json:"UserID1User" toml:"UserID1User" yaml:"UserID1User"`
}

// NewStruct creates a new relationship struct
func (*chatR) NewStruct() *chatR {
	return &chatR{}
}

func (r *chatR) GetUserID2User() *User {
	if r == nil {
		return nil
	}
	return r.UserID2User
}

func (r *chatR) GetUserID1User() *User {
	if r == nil {
		return nil
	}
	return r.UserID1User
}

// chatL is where Load methods for each relationship are stored.
type chatL struct{}

var (
	chatAllColumns            = []string{"id", "user_id_1", "user_id_2", "message", "created_at", "chat_id"}
	chatColumnsWithoutDefault = []string{"user_id_1", "user_id_2", "message", "chat_id"}
	chatColumnsWithDefault    = []string{"id", "created_at"}
	chatPrimaryKeyColumns     = []string{"id"}
	chatGeneratedColumns      = []string{}
)

type (
	// ChatSlice is an alias for a slice of pointers to Chat.
	// This should almost always be used instead of []Chat.
	ChatSlice []*Chat
	// ChatHook is the signature for custom Chat hook methods
	ChatHook func(context.Context, boil.ContextExecutor, *Chat) error

	chatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chatType                 = reflect.TypeOf(&Chat{})
	chatMapping              = queries.MakeStructMapping(chatType)
	chatPrimaryKeyMapping, _ = queries.BindMapping(chatType, chatMapping, chatPrimaryKeyColumns)
	chatInsertCacheMut       sync.RWMutex
	chatInsertCache          = make(map[string]insertCache)
	chatUpdateCacheMut       sync.RWMutex
	chatUpdateCache          = make(map[string]updateCache)
	chatUpsertCacheMut       sync.RWMutex
	chatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chatAfterSelectMu sync.Mutex
var chatAfterSelectHooks []ChatHook

var chatBeforeInsertMu sync.Mutex
var chatBeforeInsertHooks []ChatHook
var chatAfterInsertMu sync.Mutex
var chatAfterInsertHooks []ChatHook

var chatBeforeUpdateMu sync.Mutex
var chatBeforeUpdateHooks []ChatHook
var chatAfterUpdateMu sync.Mutex
var chatAfterUpdateHooks []ChatHook

var chatBeforeDeleteMu sync.Mutex
var chatBeforeDeleteHooks []ChatHook
var chatAfterDeleteMu sync.Mutex
var chatAfterDeleteHooks []ChatHook

var chatBeforeUpsertMu sync.Mutex
var chatBeforeUpsertHooks []ChatHook
var chatAfterUpsertMu sync.Mutex
var chatAfterUpsertHooks []ChatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Chat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Chat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Chat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Chat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Chat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Chat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Chat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Chat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Chat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChatHook registers your hook function for all future operations.
func AddChatHook(hookPoint boil.HookPoint, chatHook ChatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		chatAfterSelectMu.Lock()
		chatAfterSelectHooks = append(chatAfterSelectHooks, chatHook)
		chatAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		chatBeforeInsertMu.Lock()
		chatBeforeInsertHooks = append(chatBeforeInsertHooks, chatHook)
		chatBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		chatAfterInsertMu.Lock()
		chatAfterInsertHooks = append(chatAfterInsertHooks, chatHook)
		chatAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		chatBeforeUpdateMu.Lock()
		chatBeforeUpdateHooks = append(chatBeforeUpdateHooks, chatHook)
		chatBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		chatAfterUpdateMu.Lock()
		chatAfterUpdateHooks = append(chatAfterUpdateHooks, chatHook)
		chatAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		chatBeforeDeleteMu.Lock()
		chatBeforeDeleteHooks = append(chatBeforeDeleteHooks, chatHook)
		chatBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		chatAfterDeleteMu.Lock()
		chatAfterDeleteHooks = append(chatAfterDeleteHooks, chatHook)
		chatAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		chatBeforeUpsertMu.Lock()
		chatBeforeUpsertHooks = append(chatBeforeUpsertHooks, chatHook)
		chatBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		chatAfterUpsertMu.Lock()
		chatAfterUpsertHooks = append(chatAfterUpsertHooks, chatHook)
		chatAfterUpsertMu.Unlock()
	}
}

// One returns a single chat record from the query.
func (q chatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Chat, error) {
	o := &Chat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for chats")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Chat records from the query.
func (q chatQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChatSlice, error) {
	var o []*Chat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Chat slice")
	}

	if len(chatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Chat records in the query.
func (q chatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count chats rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if chats exists")
	}

	return count > 0, nil
}

// UserID2User pointed to by the foreign key.
func (o *Chat) UserID2User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"user_id\" = ?", o.UserID2),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// UserID1User pointed to by the foreign key.
func (o *Chat) UserID1User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"user_id\" = ?", o.UserID1),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUserID2User allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chatL) LoadUserID2User(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChat interface{}, mods queries.Applicator) error {
	var slice []*Chat
	var object *Chat

	if singular {
		var ok bool
		object, ok = maybeChat.(*Chat)
		if !ok {
			object = new(Chat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChat))
			}
		}
	} else {
		s, ok := maybeChat.(*[]*Chat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChat))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &chatR{}
		}
		args[object.UserID2] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chatR{}
			}

			args[obj.UserID2] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserID2User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserID2Chats = append(foreign.R.UserID2Chats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID2 == foreign.UserID {
				local.R.UserID2User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserID2Chats = append(foreign.R.UserID2Chats, local)
				break
			}
		}
	}

	return nil
}

// LoadUserID1User allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chatL) LoadUserID1User(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChat interface{}, mods queries.Applicator) error {
	var slice []*Chat
	var object *Chat

	if singular {
		var ok bool
		object, ok = maybeChat.(*Chat)
		if !ok {
			object = new(Chat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChat))
			}
		}
	} else {
		s, ok := maybeChat.(*[]*Chat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChat))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &chatR{}
		}
		args[object.UserID1] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chatR{}
			}

			args[obj.UserID1] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserID1User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserID1Chats = append(foreign.R.UserID1Chats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID1 == foreign.UserID {
				local.R.UserID1User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserID1Chats = append(foreign.R.UserID1Chats, local)
				break
			}
		}
	}

	return nil
}

// SetUserID2User of the chat to the related item.
// Sets o.R.UserID2User to related.
// Adds o to related.R.UserID2Chats.
func (o *Chat) SetUserID2User(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id_2"}),
		strmangle.WhereClause("\"", "\"", 2, chatPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID2 = related.UserID
	if o.R == nil {
		o.R = &chatR{
			UserID2User: related,
		}
	} else {
		o.R.UserID2User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserID2Chats: ChatSlice{o},
		}
	} else {
		related.R.UserID2Chats = append(related.R.UserID2Chats, o)
	}

	return nil
}

// SetUserID1User of the chat to the related item.
// Sets o.R.UserID1User to related.
// Adds o to related.R.UserID1Chats.
func (o *Chat) SetUserID1User(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id_1"}),
		strmangle.WhereClause("\"", "\"", 2, chatPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID1 = related.UserID
	if o.R == nil {
		o.R = &chatR{
			UserID1User: related,
		}
	} else {
		o.R.UserID1User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserID1Chats: ChatSlice{o},
		}
	} else {
		related.R.UserID1Chats = append(related.R.UserID1Chats, o)
	}

	return nil
}

// Chats retrieves all the records using an executor.
func Chats(mods ...qm.QueryMod) chatQuery {
	mods = append(mods, qm.From("\"chats\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"chats\".*"})
	}

	return chatQuery{q}
}

// FindChat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChat(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Chat, error) {
	chatObj := &Chat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chats\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, chatObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from chats")
	}

	if err = chatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return chatObj, err
	}

	return chatObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Chat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chats provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chatInsertCacheMut.RLock()
	cache, cached := chatInsertCache[key]
	chatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chatAllColumns,
			chatColumnsWithDefault,
			chatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chatType, chatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chatType, chatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chats\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chats\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into chats")
	}

	if !cached {
		chatInsertCacheMut.Lock()
		chatInsertCache[key] = cache
		chatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Chat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Chat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chatUpdateCacheMut.RLock()
	cache, cached := chatUpdateCache[key]
	chatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chatAllColumns,
			chatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update chats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, chatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chatType, chatMapping, append(wl, chatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update chats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for chats")
	}

	if !cached {
		chatUpdateCacheMut.Lock()
		chatUpdateCache[key] = cache
		chatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q chatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for chats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for chats")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in chat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all chat")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Chat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no chats provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chatUpsertCacheMut.RLock()
	cache, cached := chatUpsertCache[key]
	chatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			chatAllColumns,
			chatColumnsWithDefault,
			chatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			chatAllColumns,
			chatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert chats, could not build update column list")
		}

		ret := strmangle.SetComplement(chatAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(chatPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert chats, could not build conflict column list")
			}

			conflict = make([]string, len(chatPrimaryKeyColumns))
			copy(conflict, chatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chats\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(chatType, chatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chatType, chatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert chats")
	}

	if !cached {
		chatUpsertCacheMut.Lock()
		chatUpsertCache[key] = cache
		chatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Chat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Chat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Chat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chatPrimaryKeyMapping)
	sql := "DELETE FROM \"chats\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from chats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for chats")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q chatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no chatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chats")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chats")
	}

	if len(chatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Chat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChat(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chats\".* FROM \"chats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChatSlice")
	}

	*o = slice

	return nil
}

// ChatExists checks if the Chat row exists.
func ChatExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chats\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if chats exists")
	}

	return exists, nil
}

// Exists checks if the Chat row exists.
func (o *Chat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChatExists(ctx, exec, o.ID)
}
