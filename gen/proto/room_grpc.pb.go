// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: proto/room.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RoomGRPCService_CreateRoom_FullMethodName = "/RoomGRPCService/CreateRoom"
	RoomGRPCService_GetRooms_FullMethodName   = "/RoomGRPCService/GetRooms"
)

// RoomGRPCServiceClient is the client API for RoomGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomGRPCServiceClient interface {
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomRequest, error)
	GetRooms(ctx context.Context, in *GetRoomsRequest, opts ...grpc.CallOption) (*GetRoomsResponse, error)
}

type roomGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomGRPCServiceClient(cc grpc.ClientConnInterface) RoomGRPCServiceClient {
	return &roomGRPCServiceClient{cc}
}

func (c *roomGRPCServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoomRequest)
	err := c.cc.Invoke(ctx, RoomGRPCService_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomGRPCServiceClient) GetRooms(ctx context.Context, in *GetRoomsRequest, opts ...grpc.CallOption) (*GetRoomsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomsResponse)
	err := c.cc.Invoke(ctx, RoomGRPCService_GetRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomGRPCServiceServer is the server API for RoomGRPCService service.
// All implementations must embed UnimplementedRoomGRPCServiceServer
// for forward compatibility
type RoomGRPCServiceServer interface {
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomRequest, error)
	GetRooms(context.Context, *GetRoomsRequest) (*GetRoomsResponse, error)
	mustEmbedUnimplementedRoomGRPCServiceServer()
}

// UnimplementedRoomGRPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoomGRPCServiceServer struct {
}

func (UnimplementedRoomGRPCServiceServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRoomGRPCServiceServer) GetRooms(context.Context, *GetRoomsRequest) (*GetRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRooms not implemented")
}
func (UnimplementedRoomGRPCServiceServer) mustEmbedUnimplementedRoomGRPCServiceServer() {}

// UnsafeRoomGRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomGRPCServiceServer will
// result in compilation errors.
type UnsafeRoomGRPCServiceServer interface {
	mustEmbedUnimplementedRoomGRPCServiceServer()
}

func RegisterRoomGRPCServiceServer(s grpc.ServiceRegistrar, srv RoomGRPCServiceServer) {
	s.RegisterService(&RoomGRPCService_ServiceDesc, srv)
}

func _RoomGRPCService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomGRPCServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomGRPCService_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomGRPCServiceServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomGRPCService_GetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomGRPCServiceServer).GetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomGRPCService_GetRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomGRPCServiceServer).GetRooms(ctx, req.(*GetRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomGRPCService_ServiceDesc is the grpc.ServiceDesc for RoomGRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomGRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RoomGRPCService",
	HandlerType: (*RoomGRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _RoomGRPCService_CreateRoom_Handler,
		},
		{
			MethodName: "GetRooms",
			Handler:    _RoomGRPCService_GetRooms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/room.proto",
}
