// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: proto/connection.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ConnectionGRPCService_CreateConnection_FullMethodName = "/ConnectionGRPCService/CreateConnection"
	ConnectionGRPCService_GetConnection_FullMethodName    = "/ConnectionGRPCService/GetConnection"
	ConnectionGRPCService_GetConnections_FullMethodName   = "/ConnectionGRPCService/GetConnections"
)

// ConnectionGRPCServiceClient is the client API for ConnectionGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectionGRPCServiceClient interface {
	CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error)
	GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error)
	GetConnections(ctx context.Context, in *GetConnectionsRequest, opts ...grpc.CallOption) (*GetConnectionsResponse, error)
}

type connectionGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectionGRPCServiceClient(cc grpc.ClientConnInterface) ConnectionGRPCServiceClient {
	return &connectionGRPCServiceClient{cc}
}

func (c *connectionGRPCServiceClient) CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConnectionResponse)
	err := c.cc.Invoke(ctx, ConnectionGRPCService_CreateConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionGRPCServiceClient) GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConnectionResponse)
	err := c.cc.Invoke(ctx, ConnectionGRPCService_GetConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionGRPCServiceClient) GetConnections(ctx context.Context, in *GetConnectionsRequest, opts ...grpc.CallOption) (*GetConnectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConnectionsResponse)
	err := c.cc.Invoke(ctx, ConnectionGRPCService_GetConnections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionGRPCServiceServer is the server API for ConnectionGRPCService service.
// All implementations must embed UnimplementedConnectionGRPCServiceServer
// for forward compatibility
type ConnectionGRPCServiceServer interface {
	CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error)
	GetConnection(context.Context, *GetConnectionRequest) (*GetConnectionResponse, error)
	GetConnections(context.Context, *GetConnectionsRequest) (*GetConnectionsResponse, error)
	mustEmbedUnimplementedConnectionGRPCServiceServer()
}

// UnimplementedConnectionGRPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConnectionGRPCServiceServer struct {
}

func (UnimplementedConnectionGRPCServiceServer) CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedConnectionGRPCServiceServer) GetConnection(context.Context, *GetConnectionRequest) (*GetConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (UnimplementedConnectionGRPCServiceServer) GetConnections(context.Context, *GetConnectionsRequest) (*GetConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnections not implemented")
}
func (UnimplementedConnectionGRPCServiceServer) mustEmbedUnimplementedConnectionGRPCServiceServer() {}

// UnsafeConnectionGRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectionGRPCServiceServer will
// result in compilation errors.
type UnsafeConnectionGRPCServiceServer interface {
	mustEmbedUnimplementedConnectionGRPCServiceServer()
}

func RegisterConnectionGRPCServiceServer(s grpc.ServiceRegistrar, srv ConnectionGRPCServiceServer) {
	s.RegisterService(&ConnectionGRPCService_ServiceDesc, srv)
}

func _ConnectionGRPCService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionGRPCServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionGRPCService_CreateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionGRPCServiceServer).CreateConnection(ctx, req.(*CreateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionGRPCService_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionGRPCServiceServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionGRPCService_GetConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionGRPCServiceServer).GetConnection(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionGRPCService_GetConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionGRPCServiceServer).GetConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionGRPCService_GetConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionGRPCServiceServer).GetConnections(ctx, req.(*GetConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectionGRPCService_ServiceDesc is the grpc.ServiceDesc for ConnectionGRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectionGRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ConnectionGRPCService",
	HandlerType: (*ConnectionGRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConnection",
			Handler:    _ConnectionGRPCService_CreateConnection_Handler,
		},
		{
			MethodName: "GetConnection",
			Handler:    _ConnectionGRPCService_GetConnection_Handler,
		},
		{
			MethodName: "GetConnections",
			Handler:    _ConnectionGRPCService_GetConnections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/connection.proto",
}
