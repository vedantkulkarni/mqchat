package usersservice

import (
	"context"
	"database/sql"
	"fmt"
	"net"

	"github.com/vedantkulkarni/mqchat/gen/models"
	"github.com/vedantkulkarni/mqchat/internal/app/proto"
	"github.com/vedantkulkarni/mqchat/internal/app/services/user_service/database"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"google.golang.org/grpc"
)


type UserGRPCServer struct {
	proto.UnimplementedUserGRPCServiceServer
	DB *sql.DB
}

// Implement the gRPC service generated by protoc
func (u *UserGRPCServer) CreateUser(ctx context.Context, req *proto.CreateUserRequest) (*proto.CreateUserResponse, error) {

	user := &models.User{
		UserID:  "1",
		UserName: req.Username,
		UserEmail:    req.Email,
	}

	err := user.Insert(ctx, u.DB, boil.Infer())
	if err != nil {
		fmt.Println("Error occured while inserting the user")
		return nil, err
	}

	createUserResponse := &proto.User{
		Id: user.UserID,
		Username: user.UserName,
		Email: user.UserEmail,
	}

	return &proto.CreateUserResponse{
		User: createUserResponse,
	}, nil
}

func (u *UserGRPCServer) GetUser(ctx context.Context, req *proto.GetUserRequest) (*proto.GetUserResponse, error) {
	return nil, nil
}

func (u *UserGRPCServer) DeleteUser(ctx context.Context, req *proto.DeleteUserRequest) (*proto.DeleteUserResponse, error) {

	return nil, nil

}

func (u *UserGRPCServer) UpdateUser(ctx context.Context, req *proto.UpdateUserRequest) (*proto.UpdateUserResponse, error) {
	return nil, nil
}

func  NewUserGRPCServer(db *database.PostgresDB) (*UserGRPCServer, error) {
	return &UserGRPCServer{
		DB: db.DB,
	}, nil
}


func (u *UserGRPCServer) StartService(listner net.Listener) error {

	g:= grpc.NewServer()

	boil.SetDB(u.DB)
	
	
	proto.RegisterUserGRPCServiceServer(g, u)
	if err := g.Serve(listner); err != nil {
		fmt.Println("Error occured while serving the gRPC server")
	}
	return nil

}